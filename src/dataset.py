from google.cloud import bigquery
import os
import pandas as pd


def _find_timestamp_cols(df):
    """ This function takes the schema dataframe and returns the columns 
    which has TIMESTAMP type """
    
    return df[df['Type'] ==  'TIMESTAMP']['Name'].to_list()


class BigQuery:
    def __init__(self, credentials_json):
        self.credentials_json = credentials_json
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = credentials_json
        self.client = bigquery.Client()

    def _get_datasets_and_tables(self):
        """ This function returns a list of 
        datasets and tables in the project in the following format : project.dataset.table"""
        datasets = list(self.client.list_datasets())  # Make an API request to get datasets
        ds_tb =[]
        for dataset in datasets:
            tables = self.client.list_tables(dataset.dataset_id)  # Make an API request.
            for table in tables:
                ds_tb.append("{}.{}.{}".format(table.project, table.dataset_id, table.table_id))
        return ds_tb

    def _get_table_schema(self, table_name):
        """ Returns schema of table as a pandas dataframe. This dataframe has 3 columns:
        parameter name, type of parameter and their mode  """
        selected_table = self.client.get_table(table_name)
        schema_list = []
        for field in selected_table.schema:
            schema_list.append({"name": field.name, "type": field.field_type, "mode": field.mode})
        return schema_list 

    def get_all_table_schemas(self):
        tables = self._get_datasets_and_tables()
        all_schemas = []
        for table in tables:
            schema = self._get_table_schema(table)
            all_schemas.append({"table": table, "schema": schema})
        return all_schemas

    def query_table(self, table_name, ts_column, start_timestamp, end_timestamp):
        """Queries the table in bigquery then makes it a pandas dataframe.   """
        query = f"""SELECT * FROM {table_name} 
            WHERE {ts_column} >= TIMESTAMP('{start_timestamp}') 
            AND {ts_column} <= TIMESTAMP('{end_timestamp}') 
            LIMIT 1000
            """
        job_conf = bigquery.QueryJobConfig()
        query_job=self.client.query(query, job_config=job_conf)
        rows = query_job.to_dataframe(progress_bar_type='tqdm')
        return rows


def possible_parameter_df(rows, column_list):
    """ This function takes the pandas dataframe which is generated by querying a 
    bigquery table and returns list of all possible combinations of 
    factory-line-machine-parameter"""
    hier_list = list(set(list(rows[column_list].itertuples(index=False, name=None))))
    return sorted([list(t) for t in hier_list])
    # hier_list_pd = pd.DataFrame(hier_list)
    # hier_list_pd.columns = column_list
    # return hier_list_pd


def filter_df(df1, df2, column_list):
    """ This function filters a dataframe with the rows of another dataframe.
    We use this function to filter the bigquery table 
    with unique factory-line-machine-parameter value. """
    
    column_list = df1.columns.to_list()
    column_list = column_list[0:4] # we need user to select this
    filtered_df = pd.merge(df1, df2, on=column_list, how='inner')
    return filtered_df


def plot_filtered(filtered_df):
    """ This functions takes the filtered version of bigquery table and
    gives the plot of paramter value as a function of timestamp"""
    
    plt_df = filtered_df[['value','timestamp']]
    plt_df['timestamp'] =pd.to_datetime(plt_df['timestamp'],format = '%Y.%m.%d %H:%M:%S')
    plt_df.set_index('timestamp', inplace=True)
    plt_df['values']=pd.to_numeric(plt_df['value'], errors='coerce')
    plt_df.plot()
    
    
# credentials = "kseramik-iot-f5ff8c028c1c.json"
# all_data_sets =  _get_datasets_and_tables(credentials)
# table_name = all_data_sets[75] # 'kseramik-iot.Kale_IoT_DEV.MachineData' table 
# scl =_get_table_schema(credentials,table_name)
# tstmp = _find_timestamp_cols(scl)
# rows = query_table(credentials,table_name,'timestamp','2022-08-12','2022-08-13')
# hier_listdf = possible_parameter_df(rows)
# filtered_df=filter_df(rows,hier_listdf.loc[[3]],rows.columns.to_list()[0:4])
# plot_filtered(filtered_df)
 
 
 